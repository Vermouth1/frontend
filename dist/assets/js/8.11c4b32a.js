(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{377:function(t,a,s){t.exports=s.p+"assets/img/process.4e196603.png"},378:function(t,a,s){t.exports=s.p+"assets/img/v8-process.4b6f7ba0.png"},379:function(t,a,s){t.exports=s.p+"assets/img/tokenize.83802807.png"},419:function(t,a,s){"use strict";s.r(a);var r=s(26),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"代码执行过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码执行过程"}},[t._v("#")]),t._v(" 代码执行过程")]),t._v(" "),r("h2",{attrs:{id:"解释器和编译器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释器和编译器"}},[t._v("#")]),t._v(" 解释器和编译器")]),t._v(" "),r("p",[t._v("因为机器不能直接理解我们所写的代码，所以在执行程序之前，需要将我们所写的代码“翻译”成机器能读懂的机器语言。按语言的执行流程，可以把语言划分为编译型语言和解释型语言。")]),t._v(" "),r("p",[t._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。比如 C/C++、GO 等都是编译型语言。")]),t._v(" "),r("p",[t._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。比如 Python、JavaScript 等都属于解释型语言。")]),t._v(" "),r("p",[r("img",{attrs:{src:s(377),alt:"编译器和解释器过程图"}})]),t._v(" "),r("ol",[r("li",[t._v("在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生成抽象语法树（AST），然后是优化代码，最后再生成处理器能够理解的机器码。如果编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功。")]),t._v(" "),r("li",[t._v("在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST），不过它会再基于抽象语法树生成字节码，最后再根据字节码来执行程序、输出结果。")])]),t._v(" "),r("h2",{attrs:{id:"v8执行javascript代码过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#v8执行javascript代码过程"}},[t._v("#")]),t._v(" V8执行Javascript代码过程")]),t._v(" "),r("p",[t._v("V8执行 Javascript 过程如下：")]),t._v(" "),r("p",[r("img",{attrs:{src:s(378),alt:"v8执行过程图"}})]),t._v(" "),r("h3",{attrs:{id:"_1-生成抽象语法树（ast）和执行上下文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成抽象语法树（ast）和执行上下文"}},[t._v("#")]),t._v(" 1.生成抽象语法树（AST）和执行上下文")]),t._v(" "),r("p",[t._v("将源代码转换为抽象语法树，并生成执行上下文。对于编译器或者解释器来说，它们可以理解的就是 AST 了。所以无论你使用的是解释型语言还是编译型语言，在编译过程中，它们都会生成一个 AST。("),r("a",{attrs:{href:"https://resources.jointjs.com/demos/javascript-ast",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看生成的AST"),r("OutboundLink")],1),t._v(")")]),t._v(" "),r("p",[t._v("AST 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目是 Babel。Babel 是一个被广泛使用的代码转码器，可以将 ES6 代码转为 ES5 代码，这意味着你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。除了 Babel 外，还有 ESLint 也使用 AST。ESLint 是一个用来检查 JavaScript 编写规范的插件，其检测流程也是需要将源码转换为 AST，然后再利用 AST 来检查代码规范化的问题。")]),t._v(" "),r("ol",[r("li",[r("p",[r("strong",[t._v("词法分析(分词)")])]),t._v(" "),r("p",[t._v("分词(tokenize)阶段，其作用是将一行行的源码拆解成一个个 token。所谓 token，指的是语法上不可能再分的、最小的单个字符或字符串。例如关键字 var，标识符 myName，赋值运算符 = 都是 token")]),t._v(" "),r("p",[r("img",{attrs:{src:s(379),alt:"tokenize"}})])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("语法分析(解析)")])]),t._v(" "),r("p",[t._v("解析阶段(parse)，根据分词阶段生成的 token 根据语法规则转换成 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。")])])]),t._v(" "),r("h3",{attrs:{id:"_2-生成字节码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成字节码"}},[t._v("#")]),t._v(" 2.生成字节码")]),t._v(" "),r("p",[t._v("有了 AST 后，解释器(Ignition)会根据 AST 生成"),r("strong",[t._v("字节码(字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。)")]),t._v("，并解释执行字节码。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("其实一开始 V8 并没有字节码，而是直接将 AST 转换为机器码，由于执行机器码的效率是非常高效的，所以这种方式在发布后的一段时间内运行效果是非常好的。但是随着 Chrome 在手机上的广泛普及，特别是运行在 512M 内存的手机上，内存占用问题也暴露出来了，因为 V8 需要消耗大量的内存来存放转换后的机器码。为了解决内存占用问题，V8 团队大幅重构了引擎架构，引入字节码，并且抛弃了之前的编译器，最终花了将进四年的时间，实现了现在的这套架构")])]),t._v(" "),r("h3",{attrs:{id:"_3-执行阶段"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行阶段"}},[t._v("#")]),t._v(" 3.执行阶段")]),t._v(" "),r("p",[t._v("解释器除了负责生成字节码之外，还会解释执行字节码。在解释器执行字节码的过程中，如果发现有热点代码(HotSpot)，比如一段代码被重复执行多次，这种就称为热点代码，那么后台的编译器(TurboFan)就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。")]),t._v(" "),r("p",[t._v("这种字节码配合解释器和编译器的技术称为"),r("strong",[t._v("即时编译(JIT)")])]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),r("p",[t._v("字节码和热点机器码存在V8堆内存中")])]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/article/131887",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译器和解释器：V8是如何执行一段JavaScript代码的？"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);